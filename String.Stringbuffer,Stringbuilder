`String`, `StringBuffer`, 그리고 `StringBuilder`는 모두 문자열을 다루는 클래스들이지만 몇 가지 중요한 차이점이 있습니다.

1. **String**
    - `String` 클래스는 불변(immutable)입니다. 즉, 한 번 생성된 문자열은 변경할 수 없습니다.
    - 문자열에 대한 수정, 추가, 삭제가 필요할 때마다 새로운 문자열 객체를 생성합니다.
    - 멀티스레드 환경에서 안전합니다.
    - ```java
      String str = "Hello";
      str += " World";
      ```
      이와 같이 문자열을 연결하거나 수정하면 새로운 문자열이 생성됩니다.

2. **StringBuffer**
    - `StringBuffer`는 스레드 세이프(thread-safe)하며, 동기화되어 있어 여러 스레드에서 안전하게 사용할 수 있습니다.
    - 문자열의 수정, 추가, 삭제가 필요한 경우 사용됩니다.
    - ```java
      StringBuffer buffer = new StringBuffer("Hello");
      buffer.append(" World");
      ```
      이와 같이 문자열을 수정하거나 추가할 때, 새로운 객체를 생성하지 않고 기존의 문자열을 변경합니다.

3. **StringBuilder**
    - `StringBuilder`도 `StringBuffer`와 유사하지만, 스레드 세이프하지 않습니다. 따라서 단일 스레드 환경에서 사용하는 것이 적합합니다.
    - `StringBuilder`는 `StringBuffer`보다 더 빠르게 동작할 수 있습니다.
    - ```java
      StringBuilder builder = new StringBuilder("Hello");
      builder.append(" World");
      ```
      `StringBuilder` 역시 문자열을 수정하거나 추가할 때 새로운 객체를 생성하지 않고 기존의 문자열을 변경합니다.

일반적으로, 문자열을 변경할 때 `StringBuffer` 또는 `StringBuilder`를 사용하는 것이 성능 상의 이점이 있습니다. 그러나 스레드 안전성이 필요한 경우 `StringBuffer`를 사용하여 안전하게 문자열을 다룰 수 있습니다.
